%{
  open Interface3

  let rec add_node_list = fun nl time ->
    match nl with
    | [] -> time
    | x::xs -> add_node_list xs (MyTimeGraph.add_node x time)

  let rec add_arc_list = fun al time ->
    match al with
    | [] -> time
    | (a,b)::abs -> add_arc_list abs (add_arc a b time)
    | _ -> failwith "wrong arc specification"

%}
%token EOL
%token QUOTE
%token COMMA
%token LBROUND
%token RBROUND
%token LBCURLY
%token RBCURLY
%token LBANGLE
%token RBANGLE
%token LBSQUARE
%token RBSQUARE
%token EXIT
%token <string> IDE
%token <int> INT
%start main
%type <MyTimeGraph.t> main
%%
  main:
    graphtype LBCURLY grapharg RBCURLY EOL  { $3 }
    ;
      
      graphtype:
    | DIGRAPH         {}
    ;

      grapharg:
    | arcdescription SEMICOLON      { let (nl,al) = $1 in
				      add_arc_list al (add_node_list nl MyTimeGraph.empty)
				    }
      
